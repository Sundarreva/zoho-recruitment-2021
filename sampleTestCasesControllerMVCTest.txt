@ExtendWith(SpringExtension.class)
public class BatchControllerTest {
    private MockMvc mockMvc;
    @Mock
    private DbToSftpBatchService dbToSftpBatchService;
    @Mock
    private Gson mockGson;
    @Mock
    private ConfigProperties config;
    
    @InjectMocks
    private BatchController controller;
    static HttpHeaders header;

    @BeforeAll
    static void setup(){
        header = new HttpHeaders();
        header.setBasicAuth("batch_service_user", "B@tChS3rv!ceU5er");
    }
    @BeforeEach
    void setupEach(){
        MockitoAnnotations.initMocks(this);
        mockMvc = MockMvcBuilders.standaloneSetup(controller).build();
    }
    @Test
    void performDbToSftpBlstorcdt() throws Exception {
        String jsonRequest = "{\"intf\": \"BLSTORCDT\",\"clientTransactionId\": \"1077\",\"date\": \"090920023022\",\"input\": [{\"sourceName\": \"v_sei_rap_store_credits\",\"destinationName\": \"mom.mom_store_credit.gz\",\"transactionId\": \"v_sei_rap_store_credits_1077\",\"status\": \"READY\",\"destinationPath\": \"/wm_data/wmIMMOPData/7EP/IN/BLSTORCDT_MF/\",\"triggerName\": \"BLSTORCDT_P\"}]}";
        Mockito.doNothing().when(dbToSftpBatchService).perfromAction(Mockito.any(BatchRequest.class),Mockito.anyString(),Mockito.any(Job.class));
        
        RequestBuilder requestBuilder = MockMvcRequestBuilders.post("/sevenep/blstorcdt/dbtofile")
                .contentType(MediaType.APPLICATION_JSON_VALUE).content(jsonRequest).headers(header);
        MvcResult result =mockMvc.perform(requestBuilder).andReturn();
        assertEquals(HttpStatus.OK.value(), result.getResponse().getStatus());
    }